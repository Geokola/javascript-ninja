###### JAVASCRIPT LEARNING FROM NOVICE TO NINJA! ######
>>>>> String Properties and Methods <<<<< 
const name = 'Alexa';
* length of string:
    name.length; 

* change to capital letter (uppercase)
    name.toUpperCase();

* change to small letter (lowercase)
    name.toLowwerCase();

* know which character is at a certain position: 
    name.charAt(2);

* know the position of a character in a string: 
    name.indexOf('e');
    - returns -1 is false 

* know the last occurrence of a character or substring in a string:
    name.lastIndexOf('a');

* check if a string containes a certain character:
    name.includes('a');
    - returns a boolean  

* check if a string starts with a certain character:
    name.startsWith('a');
    
* check if a string ends with a certain character
    name.endsWith('a');

* concatenate/join two or more strings together:
    'Hello'.concat(' ', 'World', '!');
    - its better to use addition sign '+' to concatenate strings together

* to remove whitespace from the beginning and end of a string: trim()
    '   \t \n javascript ninja! \r'.trim();

* to repeat a string the stated number of times:
    'Hello'.repeat(3); 


>>>>> Template Literals <<<<<< 
* template literals use the backtick character, to deliminate the string:
    const greet = `Hello`;

* this makes it possible to use both types of quote marks withing the string:
const txt = `She said, "It's time to sleep!"`;

* they also allow interpolation of Javascript code.
* we can insert javascript expression inside a string:
    const name = 'John';
    `hello, ${name}!`;

    const age = 20;
    `I will be ${age + 1} next year.`;


>>>>> Numbers <<<<< 
* number can be integer or floating/decimal.
* check if number is integer:
    const num = 4;
    Number.isInteger(num); // true 

* to create an hexadecimal number:
    - starts with 0x 

* to create an octal number: 
    - starts with 0o

* to create a binary number:
    - starts with 0b 

* to write number in exponential notation(standard form):
    const num = 2e3; //2000
    const num2 = 2.5e-3; //0.0025 

* to return a number in exponential notation string:
    - 5..toExponential(); //'5e+0'
    - 5 .toExponential(); //'5e+0'
    - 5.0.toExponential(); //'5e+0'
    - (5).toExponential(); //'5e+0'
    - or assign the number to a constant:
        const num = 5;
        num.toExponential(); //'5e+0'

* to round number to a fixed number of decimal places and return as a string:
    const pi = 3.141592;
    pi.toFixed(3); //'3.142'

* to round number to significant figure precision and return as a string:
    325678..toPrecision(2); //'3.3e+5'
    2.459.toPrecision(2); //'2.5'

* to check is a value is a number:
    Number.isFinite(42); // true 


>>>>> Type Coercion <<<<< 
* Type coercion happens when the operands of an operator are of different types.
* Javascript will try to convert one operand to an equivalent value of the other operand's type.
    - '2' * 8; //16
    - '2' + 8; //'28'


>>>>> Converting Strings to Numbers 
    1. const num = Number('23');
    2. const num = +'23'; 
    3. const num = '23' * 1;

>>>>> Converting Numbers to Strings
    1. const str = String(23);
    2. const str = 23..toString();
    3. const str = 23 + ''; 

>>>>> Parsing Numbers 
* use parseInt()
* this can be used to convert a string representation of numerical value to a number.
* you can specify the base of the number you are trying to convert:
    - convert from binary to base 10:
        parseInt('1010', 2); //10 
    - get only the number from a mixture of string an numbers 
        const address = 'No 206a, ilkeston road';
        const number = parseInt(address,10); //206
    - when used with a decimal number, it returns only the integer part:
        paseInt('2.45', 10); //2 
>>>>> Parsing Float:
    parseFloat('2.97', 10); //2.97 


>>>>> Undefined 
* this is the value given to variables that have not been assigned a value.
* it always returns NaN 

>>>>> Null 
* Null means 'no value'.
* it is like a placeholder 
* it behaves like zero 
    const num = 10 + null; // 10

>>>>> Booleans 
* has two values: true and false 
* most values are true 
* the 9 false values in javascript are:
    1. ''
    2. ""
    3. 0
    4. -0
    5. NaN 
    6. false 
    7. null 
    8. undefined 
    9. `` 

    * examples:
    - Boolean('hello'); //true 
    - Boolean(25); //true 
    - Boolean(0); //false 
    - Boolean(null); //false 


>>>>> Logical Operators <<<<< 
1. ! (Logical NOT) 
    * this is signgle negation
    * this convert the value to a boolean and return its opposite:
    !true; //false 
    !0; //true 

2. !! (Double Negation) 
    * it is possible to negate a negation by using !! 
    * this is equivalent to using 'Boolean()' 
    * examples: 
        !!''; //false 
        !!'hello'; //true 
        !!NaN; //false 

3. && (Logical AND) 
    * this works on two or more values 
    * it evaluates to true ONLY if all the operands are truthy.
    * returns the last value if all of them are true.
    * returns the first falsy value if at least one of them is false.
    * examples:
        'shoes' && 18; //18 
    'shoes' && 0; //0

4. || (Logical OR) 
    * this works on two or more values
    * it evaluates to true if any of the operands are truthy.
    * returns the first truthy value if any of them are true.
    * returns the last falsy value if all of them are false.
    * examples:
        'shoes' || 0; //'shoes'
        NaN || undefined; //undefined


>>>>>> Comparison <<<<<<< 
1. Equality =:
    * this is used to assign value to variable.
    const answer = 5;

2. Soft Equality ==: 
    * this is used to check for equality
    * returns boolean 
    * doesnt take into account the data type 
    answer == 5; //true 
    answer == '5'; //true 

3. Hard Equality ===:
    * checks for equality 
    * returns boolean 
    * considers the data type.
    * only strange result is: NaN === NaN; //false 
    '5' === 5; //false 


>>>>> Inequality <<<<<
1. Soft Not Equal-to !=:
    16 != '16'; //false 

2. Hard Not Equal-to !==:
    16 != '16'; //true 

3. Greater than >:
    5 > 4; //true 

4. Less than <:
    5 < 4; //false 

5. Greater than or equal to >=:
    5 >= 4; //true 

6. Less than or equal to <=:
    5 <= 4; //false


###### STORING LIST OF VALUES (ARRAYS, SETS AND MAPS)
>>>>> ARRAY <<<<< 
* is an ordered list of values 
* arrays are not primitive values but a special built-in object.
     const myArr = [];
     const myArr = new Array(); 

    const mixedArray = [1, null, [], 'two', true];

* remove an item from the array:
    * example: remove the 4th element from the array:
    delete mixedArray[3];
    * this will keep the position unchanged and replaced the deleted value with undefined


>>> Array Destructuring:
* this involves taking values out of an array and presenting them as individual values: 
    
    const [name, age] = ['kola', 22];
    name; //kola 
    age; //22 

>>>> Array Properties and Methods:
const avengers = ['Captain America', 'Iron Man', 'Thor', 'Hulk'];
1. Find the length:
    avengers.length; //4 

    * the length property is mutable (changeable)
    * if you increase the length, the extra slots will be filled with 'undefined' as values.
    * if you decrease the length, the extra elements will be removed completely.

2. Get the last element of the array:
    avengers[avengers.length - 1]; //Hulk 

3. Remove the last element from an array pop():
    avengers.pop(); //Hulk

4. Remove the first element from an array shift():
    avengers.shift(); //Captain America 

5. Append a new element to the end of the array push():
    avengers.push('Nazareth Girlie');

6. Append a new element to the beginning of the array unshift(); 

7. Merging Arrays concat(): 
    * concat() method can be used to merge an array with one or more arrays: 
    avengers.concat(['Hawkeys', 'Black Widow']);

8. Merging Arrays Spread Operator ...:
    avengers = [...avengers..., ['Hawkeys', 'Black Widow']];

9. Turn an array into a string join():
    * the separator is specified as the parameter 
    * the default separator is comma (,) 
    avengers.join();
    // 'Captain America, Iron Man, Thor, Hulk'

    avengers.join(' & ');
    // 'Captain America & Iron Man & Thor & Hulk' 

10. Slice an array slice(param1, param2):
    - this is used to create a subarray 
    - takes two parameters: 
        - param1 = the start position 
        - param2 = the number of items to slice 

    const arr = ['one', 'two', 'three', 'four', 'five'];
    arr[1,2];
    // ['two', 'three']

11. Remove item from and array and replace it with a new item splice(param1, param2, param3):
    - takes three parameters:
        - param1 = the start position
        - param2 = the number of items to remove 
        - param3 = the replacement 
    - if param3 is set to 0, no items will be removed.

    arr[4, 1, 'newFive'];
    // this has replaed 'five' with 'newFive'

12. Reverse an array reverse():
    arr.reverse();

13. Sort an array sort():
    - this sorts both string and number arrays alphabetically.
    arr.sort();

14. Find the index of an item in an array indexOf(item):
    - returns the index of the item if found 
    - returns -1 if not found 
    arr.indexOf('two');
    //1

15. Check if an item is in an array includes(item):
    - returns a boolean 
    arr.includes('two');
    //true 

16. Multidimensional array:
    * this is haveing an array inside another array 
    const coordinates = [['one, 'two'], ['three, 'four'], ['five','six']];

    coordinates[0,1]; //'two' // the second value of the first array 
    coordinates[2,0]; //'five' // the first value of thrid array 

17. Nesting arrays to create a multidimentional array: 
    const summer = ['jun', 'jul', 'aug'];
    const winter = ['dec', 'jan', 'feb'];
    const nexted = [summer, winter];
    // [['jun', 'jul', 'aug'], ['dec', 'jan', 'feb']]

18. Flatening multidimentional array to just one level array: 
    - make use of spread operator 
    const flat = [...summer, ...winter];
    //['jun', 'jul', 'aug', 'dec', 'jan', 'feb']


>>>>>> Set <<<<<< 
* this is used to collect distinct unique data 
* any repeated character is ignored
* set do not have index notation 
* creating a set 
    const list = new Set();

* add item to set 
    list.add('one');

* add multiple items to set:
    list.add('two').add('three');

* another way of adding multiple items to set:
    const num = new Set([1, 4, 9, 16]);

* converting a string into each character 
    const separated = new Set('hello');
    //{'h', 'e', 'l', 'o'}

* to add separate words, use add() method repeatedly: 
    const myText = new Set().add('hello').add('world');

* get the number of values in a set using size():
    myText.size(); //2 

* check if an item is in a set using has(item):
    - returns boolean 
    myText.has('hello');
    //true

* remove an item from a set using delete(item):
    myText.delete('world');

* remove all items from a set using clear():
    myText.clear();


>>>>> Convertion Set and Array <<<<<< 
* converting a set to an array using spread operator 
    const shoppingSet = new Set().add('Apple').add('Banana').add('Mango'); 
    const shoppingArray = [...shoppingSet];
    
* another method to convert a set to array using Array.from():
    const shoppingArray = Array.from(shoppingSet);

* create a copy array without duplicate:
    const duplicateArray = ['one', 'two', 'one', 'three'];
    const uniqueArray = [...new Set(duplicateArray)];
    //['one', 'two', 'three']


>>>>> Map <<<<< 
* a map is like a dictionary which has keys and  values. 
1. Create a map:
    const romanNum =  new Map();

2. Adding entries to maps using set();
    romanNum.set(1, 'I');
    // Map{1=>'I'}

2. Add multiple items using repeated set():
    romanNum.set(2,'II').set(3,'III').set(4,'IV');

3. Create multiple values using a nested array:
    const heroes = new Map([['Clark Kent', 'Superman'], 'Bruce Wayne', 'Batman']);
    Map{'Clark Kent'=>'Superman', 'Bruce Wayne'=>'Batman'}

>>>> Map Methods: 
1. Get value using a key using get(): 
    romanNum.get(4);
    //'IV'

2. Check if a key is in a map using has():
* returns boolean 
    romanNum.has(5);
    // false 

3. Get number of key values pair in a map using size:
    romanNum.size;
    // 4

4. Remove a key and value pair from a map using delete(key):
    * this returns a boolean 
    romanNum.delete('Clark Kent');
    //true 

5. Remove all key and value pairs from a map: 
    romanNum.clear();

>>>>> Converting Maps to Arrays 
* Convert to a nested array of key-value pairs using the spread operator: 
    const arrayFromMap = [...romanNum];
    // [[1, 'I'], [2, 'II'], [3, 'III'], [4, 'IV']];

* Alternatively, use the Array.from() method:
    const arrayFromMap = Array.from(romanNum);
    // [[1, 'I'], [2, 'II'], [3, 'III'], [4, 'IV']];


>>>>> Logical Operator:
* is used to set conditions for different block of codes
1. if Statements:
    if (condition) {
        // code to run if condition is true 
    }

2. else Statements:
* is used to add an alternative block of code to run if the condition is false.
    if (condition) {
        // code to run if condition is true
    }
    else{
        // code to run if condition is false 
    }

3. Ternary Operator:
* is a shorthand way of writing if ... else statement.
    condition ? (//code to run if condition is true) : (//code to run if condition is false);

    const num = 5;
    n % 2 === 0 ? console.log(`${num} is an even number`) : console.log(`${num} is an odd number`);


3. else if Statements:
* can be used to test for more conditions:
    if(conditon_1){
        //run code 
    }
    else if(condition_2){
        //run code 
    }
    else if(condition_3){
        //run code 
    }
    else{
        //run code if non of the conditions were true 
    }

    number = 4;
    if (number == 4){
        console.log('You rolled a four');
    }
    else if (number == 5){
        console.log('You rolled a five');
    }
    else if (number === 6){
        console.log('You rolled a six');
    }
    else{
        console.log('You rolled a number less than four');
    }

4. Switch Statements 
* This is much more better to use when we have multiple condition to test, rather than using eht else if statements:
    switch (number){
        case 4:
            console.log('You rolled a four');
            break;
        case 5:
            console.log('You rolled a five');
            break;
        case 6:
            console.log('You rolled a six');
            break;
        default:
            console.log('You rolled a number less than four');
            break;
    }

* it is important to finish a case block with a break keyword 


>>>>> Loops
* Loops will repeat a piece of code over and over again based on certain conditions.

1. while Loops 
    while (condition){
        // do something 
    }
    Example: count down from 10 and keep repeating same code until the count is 0:
    let count = 10
    while (count > 0){
        console.log(`The current count is ${count}`);
        count = count -1; //count--;

    }
    * be careful not to run into indefinate loop!

2. do ... while Loops:
* this is similar to while loop 
* only difference is that the condition comes after the 'do' block 
* this means that no matter the outcome of the condition, the code will run at least once.
    do {
        // code to run 
    }
    while (condition);

    Example:
    let number = 10;
    do {
        console.log(`The current count is ${number}`);
        number--;
    } while (number > 0);

3. for Loops 
* this is the most common type of loop 
    for (initialization ; condition; iteration){
        // do something 
    }

    for (let number = 10; number > 0; number--){
        console.log(`The current count is ${number}`);
    }

4. Nested for Loops:
* you can place a loop inside another loop to create a nested loop.
* the inner loop will run all the way through before the next step of the outer loop occurs.
* Example: produce a 12 by 12 multiplication table
    for(let i = 1; i < 13; i++){
    for(let j = 1; j < 13; j++){
        let result = i * j;
        console.log(`${i} multiplied by ${j} is ${result}`);
    }
}


>>>>> Looping over Arrays:
1. using for loop 
    const avengers = ['Black Widow', 'Captain America', 'Hawkeye'];
    const max = avengers.length;
    for (let i = 0, i < max; i++){
        console.log(avengers[i]);
    }

    or 
    for (let i = 0; count = avengers.length; i < count; i++){
        console.log(avengers[i]);
    }

* using the ES6 for ... of loop:
    for (const val of avengers){
        console.log(avengers[i]);
    }
    * the variable need to be declared using const 

* looping over Sets:
    const letters = new Set('hello');
    for (const chr of letters){
        console.log(chr);
    } 
    //h 
    //e 
    //l 
    //l 
    //o 

* looping over Maps:
    * every Map object has both keys() and values() method 
    const romanNum = new Map();
    romanNum.set(1,'I').set(2,'II').set(3,'III').set(4,'IV');

    * to loop through the keys:
    for(const key of romanNum.keys()){
        console.log(key);
    }
    //1
    //2
    //3
    //4

    * to loop through the values:
    for (const val of romanNum.values()){
        console.log(val);
    }
    //I
    //II 
    //III 
    //IV 

    * to access both the keys and values in the loop:
    for (const [key, val] of romanNum){
        console.log(`${key} in Roman Numerals is ${val}`)
    }


>>>>>> Functions <<<<<<< 
1. A named funtion:
    function hello(){
        console.log('hello dear');
    }

2. Function expressions:
    * this assigned an anonymous function to a declared variable:
    * take note of the ending semi-colon 
    const goodbye = function(){
        console.log('Goodbye fellas');
    };

3. Get the function name:
    * every function has a name
    * this is very useful when debugging a code 
    hello.name;
    // 'hello'
    goodbye.name;
    // 'goodbye'

4. Using Function() Constructors:
    * the body of the function is entered as a string:
    const hi = new Function('consile.log("Hi World");');


5. Invoking a Function:
    * this means calling a function to run the code inside its body.
    * simply write the function name, followed by parentheses.
    hello();
    // 'Hello World'

6. Passing a function to another variable:
    * do this without the parentheses 
    const newGreeting = greeting;

7. Return Values: 
* all function returns a value 
* make use of the return keyword 
* a function that doesnt explicitly return anything will return undefined by default 

    function howdy(){
        return 'Howdy World';
    }

    const msg = howdy();
    // 'Howdy World'

8. Parameters and Arguments:
* Parameters and Arguments are values provided for the function as an input.
* Parameters are set when the function is being defined.
* Arguments are provided when the function is being invoked.

    Example: Define a function that takes an input and return its square

    function square(x){
        return x*x;
    }

    square(6);
    // 36

* if a function is not provided all the needed arguments when invoking it, the parameters will be given a value of undefined 
* if too many arguments are provided when a function is invoked, the extra arguments will be ignored.


9. Variable Numbers of Arguments:
* this is when the number of needed arguments is not certain.
* we will use the 'rest operator'
* this creates an array of arguments with are avaliable inside the body of the function 
* place three dots (...) in front of the last parameter in a function declaratino
* examples:
    function myRest(...args){
        return args;
    }

* the 'args' above is an array and we iterate it using for-of loop 
    function myRest(...agrs){
        for(arg of args){
            console.log(arg);
        }
    }

    myRest(2,4, 'three', true);
    // 2
    // 4
    // 'three'
    // true 

* examples of an advance mean calculation:
    function getMean(...args){
        let total = 0;
        for(arg of args){
            total += arg;
        }
        const arrLength = args.length;
        const result = total / arrLength;
        return result;
    }


10. Using Default Parameters:
* these values will be used by the funtion if no arguments are provided when it is invoked. 

    function hello(name='World'){
        console.log(`Hello ${name}!`);
    }

    hello();
    // 'Hello World'
    hello('England');
    // 'Hello England' 

* default parameters should always come after non-default parameters
    function discount(price, amount = 10){
        return price * (100 - amount) / 100;
    }
    discount(20);
    // 18 

11. Arrow Functions:
* this is just another fancy and more clinical way of writing function by using arrow symbol:
* if no parameters required, a pair of empty parentheses must go before the arrow.
* single parameters dont need putting into parentheses.
* the body of the function doesnt need placing inside a block, if it's only one line.
* doesnt need the 'return' keyword
* they don't bind their own value of 'this' to the function.
* examples:

    const square = x => x*x;
    square(3);
    // 9 

    const add = (x,y) => x + y;
    add(5,9);
    // 14

    const hello = () => 'Hello World';
    hello();
    // 'Hello World' 

    const tax = (salary) => {
        const taxable = salary - 8000;
        const lowerRate = 0.25 * taxable;
        taxable = taxable - 20000;
        const higherRate = 0.4 * taxale;
        return lowerRate + higherRate;
    }

12. Function Hoisting:
* In JavaScript, it is possible to invoke a function before declaring it.
* Every function, defined using the 'function' keyword, are automatically hoisted.

    hoist();

    function hoist(){
        console.log('Hoist Me!');
    }

* this can makes you to place all your functions at the end of the program.

13. Callbacks 
    * a function that is passed as an argument to another function is known as a callback. 
    * this allows a function to call another function 
    * example: two functions:
        a. perform sum of two numbers 
        b. display the result 
    
    function myDisplayer(resParam){
        console.log(resParam);
    }

    function myCalc(n1, n2, myCallback){
        let result = n1 + n2;
        myCallback(result);
    }

    myCalculator(4, 7, myDisplayer);
    // 11

    * when you pass a function as an argument, do not use parentheses.
        - i.e. myCalculator(4, 7, myDisplayer());

    * another example to remove negative numbers from an array:
    const myNumber = [-2, 5, 7, -3, 0, -6];

    function filterNum(x){
        if (x >= 0){
            return x;
        }
    }

    function newArray(numArray, callback){
        let arr = [];
        for (const i of numArray){
            if(callback(i)){
                arr.push(i);
            }
        }
        return arr;
    }

    const myNewNum = newArray(myNumber, filterNum);

    console.log(myNewNum);
    // [5, 7]
    


















    
