###### JAVASCRIPT LEARNING FROM NOVICE TO NINJA! ######
>>>>> String Properties and Methods <<<<< 
const name = 'Alexa';
* length of string:
    name.length; 

* change to capital letter (uppercase)
    name.toUpperCase();

* change to small letter (lowercase)
    name.toLowwerCase();

* know which character is at a certain position: 
    name.charAt(2);

* know the position of a character in a string: 
    name.indexOf('e');
    - returns -1 is false 

* know the last occurrence of a character or substring in a string:
    name.lastIndexOf('a');

* check if a string containes a certain character:
    name.includes('a');
    - returns a boolean  

* check if a string starts with a certain character:
    name.startsWith('a');
    
* check if a string ends with a certain character
    name.endsWith('a');

* concatenate/join two or more strings together:
    'Hello'.concat(' ', 'World', '!');
    - its better to use addition sign '+' to concatenate strings together

* to remove whitespace from the beginning and end of a string: trim()
    '   \t \n javascript ninja! \r'.trim();

* to repeat a string the stated number of times:
    'Hello'.repeat(3); 


>>>>> Template Literals <<<<<< 
* template literals use the backtick character, to deliminate the string:
    const greet = `Hello`;

* this makes it possible to use both types of quote marks withing the string:
const txt = `She said, "It's time to sleep!"`;

* they also allow interpolation of Javascript code.
* we can insert javascript expression inside a string:
    const name = 'John';
    `hello, ${name}!`;

    const age = 20;
    `I will be ${age + 1} next year.`;


>>>>> Numbers <<<<< 
* number can be integer or floating/decimal.
* check if number is integer:
    const num = 4;
    Number.isInteger(num); // true 

* to create an hexadecimal number:
    - starts with 0x 

* to create an octal number: 
    - starts with 0o

* to create a binary number:
    - starts with 0b 

* to write number in exponential notation(standard form):
    const num = 2e3; //2000
    const num2 = 2.5e-3; //0.0025 

* to return a number in exponential notation string:
    - 5..toExponential(); //'5e+0'
    - 5 .toExponential(); //'5e+0'
    - 5.0.toExponential(); //'5e+0'
    - (5).toExponential(); //'5e+0'
    - or assign the number to a constant:
        const num = 5;
        num.toExponential(); //'5e+0'

* to round number to a fixed number of decimal places and return as a string:
    const pi = 3.141592;
    pi.toFixed(3); //'3.142'

* to round number to significant figure precision and return as a string:
    325678..toPrecision(2); //'3.3e+5'
    2.459.toPrecision(2); //'2.5'

    






































    
